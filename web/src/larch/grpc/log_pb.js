// source: log.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.AuthCheck2Request', null, global);
goog.exportSymbol('proto.AuthCheck2Response', null, global);
goog.exportSymbol('proto.AuthCheckRequest', null, global);
goog.exportSymbol('proto.AuthCheckResponse', null, global);
goog.exportSymbol('proto.AuthRequest', null, global);
goog.exportSymbol('proto.AuthResponse', null, global);
goog.exportSymbol('proto.HintMsg', null, global);
goog.exportSymbol('proto.InitRequest', null, global);
goog.exportSymbol('proto.InitResponse', null, global);
goog.exportSymbol('proto.RegRequest', null, global);
goog.exportSymbol('proto.RegResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HintMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HintMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HintMsg.displayName = 'proto.HintMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InitRequest.repeatedFields_, null);
};
goog.inherits(proto.InitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InitRequest.displayName = 'proto.InitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InitResponse.displayName = 'proto.InitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RegRequest.displayName = 'proto.RegRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RegResponse.displayName = 'proto.RegResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AuthRequest.repeatedFields_, null);
};
goog.inherits(proto.AuthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AuthRequest.displayName = 'proto.AuthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AuthResponse.displayName = 'proto.AuthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AuthCheckRequest.displayName = 'proto.AuthCheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthCheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AuthCheckResponse.displayName = 'proto.AuthCheckResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthCheck2Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthCheck2Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AuthCheck2Request.displayName = 'proto.AuthCheck2Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthCheck2Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthCheck2Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AuthCheck2Response.displayName = 'proto.AuthCheck2Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HintMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.HintMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HintMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HintMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    xcoord: msg.getXcoord_asB64(),
    authXcoord: msg.getAuthXcoord_asB64(),
    r: msg.getR_asB64(),
    authR: msg.getAuthR_asB64(),
    a: msg.getA_asB64(),
    b: msg.getB_asB64(),
    c: msg.getC_asB64(),
    f: msg.getF_asB64(),
    g: msg.getG_asB64(),
    h: msg.getH_asB64(),
    alpha: msg.getAlpha_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HintMsg}
 */
proto.HintMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HintMsg;
  return proto.HintMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HintMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HintMsg}
 */
proto.HintMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setXcoord(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthXcoord(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthR(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setC(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setF(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setG(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setH(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HintMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HintMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HintMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXcoord_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAuthXcoord_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAuthR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getA_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getB_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getC_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getF_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getG_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getH_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getAlpha_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional bytes xcoord = 1;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getXcoord = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes xcoord = 1;
 * This is a type-conversion wrapper around `getXcoord()`
 * @return {string}
 */
proto.HintMsg.prototype.getXcoord_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getXcoord()));
};


/**
 * optional bytes xcoord = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getXcoord()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getXcoord_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getXcoord()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setXcoord = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes auth_xcoord = 2;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getAuthXcoord = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes auth_xcoord = 2;
 * This is a type-conversion wrapper around `getAuthXcoord()`
 * @return {string}
 */
proto.HintMsg.prototype.getAuthXcoord_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthXcoord()));
};


/**
 * optional bytes auth_xcoord = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthXcoord()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getAuthXcoord_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthXcoord()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setAuthXcoord = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes r = 3;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes r = 3;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.HintMsg.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes auth_r = 4;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getAuthR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes auth_r = 4;
 * This is a type-conversion wrapper around `getAuthR()`
 * @return {string}
 */
proto.HintMsg.prototype.getAuthR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthR()));
};


/**
 * optional bytes auth_r = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthR()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getAuthR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setAuthR = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes a = 5;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getA = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes a = 5;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.HintMsg.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * optional bytes a = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setA = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes b = 6;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getB = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes b = 6;
 * This is a type-conversion wrapper around `getB()`
 * @return {string}
 */
proto.HintMsg.prototype.getB_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB()));
};


/**
 * optional bytes b = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getB_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setB = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes c = 7;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getC = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes c = 7;
 * This is a type-conversion wrapper around `getC()`
 * @return {string}
 */
proto.HintMsg.prototype.getC_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getC()));
};


/**
 * optional bytes c = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getC()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getC_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getC()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setC = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes f = 8;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getF = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes f = 8;
 * This is a type-conversion wrapper around `getF()`
 * @return {string}
 */
proto.HintMsg.prototype.getF_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getF()));
};


/**
 * optional bytes f = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getF()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getF_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getF()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setF = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes g = 9;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getG = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes g = 9;
 * This is a type-conversion wrapper around `getG()`
 * @return {string}
 */
proto.HintMsg.prototype.getG_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getG()));
};


/**
 * optional bytes g = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getG()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getG_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getG()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setG = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes h = 10;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getH = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes h = 10;
 * This is a type-conversion wrapper around `getH()`
 * @return {string}
 */
proto.HintMsg.prototype.getH_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getH()));
};


/**
 * optional bytes h = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getH()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getH_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getH()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setH = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes alpha = 11;
 * @return {!(string|Uint8Array)}
 */
proto.HintMsg.prototype.getAlpha = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes alpha = 11;
 * This is a type-conversion wrapper around `getAlpha()`
 * @return {string}
 */
proto.HintMsg.prototype.getAlpha_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlpha()));
};


/**
 * optional bytes alpha = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlpha()`
 * @return {!Uint8Array}
 */
proto.HintMsg.prototype.getAlpha_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlpha()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HintMsg} returns this
 */
proto.HintMsg.prototype.setAlpha = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InitRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.InitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyComm: msg.getKeyComm_asB64(),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    authPk: msg.getAuthPk_asB64(),
    logSeed: msg.getLogSeed_asB64(),
    hintsList: jspb.Message.toObjectList(msg.getHintsList(),
    proto.HintMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitRequest}
 */
proto.InitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitRequest;
  return proto.InitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitRequest}
 */
proto.InitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyComm(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthPk(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogSeed(value);
      break;
    case 5:
      var value = new proto.HintMsg;
      reader.readMessage(value,proto.HintMsg.deserializeBinaryFromReader);
      msg.addHints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyComm_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAuthPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLogSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getHintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.HintMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key_comm = 1;
 * @return {!(string|Uint8Array)}
 */
proto.InitRequest.prototype.getKeyComm = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key_comm = 1;
 * This is a type-conversion wrapper around `getKeyComm()`
 * @return {string}
 */
proto.InitRequest.prototype.getKeyComm_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyComm()));
};


/**
 * optional bytes key_comm = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyComm()`
 * @return {!Uint8Array}
 */
proto.InitRequest.prototype.getKeyComm_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyComm()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.InitRequest} returns this
 */
proto.InitRequest.prototype.setKeyComm = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.InitRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.InitRequest} returns this
 */
proto.InitRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes auth_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.InitRequest.prototype.getAuthPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes auth_pk = 3;
 * This is a type-conversion wrapper around `getAuthPk()`
 * @return {string}
 */
proto.InitRequest.prototype.getAuthPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthPk()));
};


/**
 * optional bytes auth_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthPk()`
 * @return {!Uint8Array}
 */
proto.InitRequest.prototype.getAuthPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.InitRequest} returns this
 */
proto.InitRequest.prototype.setAuthPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes log_seed = 4;
 * @return {!(string|Uint8Array)}
 */
proto.InitRequest.prototype.getLogSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes log_seed = 4;
 * This is a type-conversion wrapper around `getLogSeed()`
 * @return {string}
 */
proto.InitRequest.prototype.getLogSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogSeed()));
};


/**
 * optional bytes log_seed = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogSeed()`
 * @return {!Uint8Array}
 */
proto.InitRequest.prototype.getLogSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.InitRequest} returns this
 */
proto.InitRequest.prototype.setLogSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated HintMsg hints = 5;
 * @return {!Array<!proto.HintMsg>}
 */
proto.InitRequest.prototype.getHintsList = function() {
  return /** @type{!Array<!proto.HintMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.HintMsg, 5));
};


/**
 * @param {!Array<!proto.HintMsg>} value
 * @return {!proto.InitRequest} returns this
*/
proto.InitRequest.prototype.setHintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.HintMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.HintMsg}
 */
proto.InitRequest.prototype.addHints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.HintMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InitRequest} returns this
 */
proto.InitRequest.prototype.clearHintsList = function() {
  return this.setHintsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.InitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pk: msg.getPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitResponse}
 */
proto.InitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitResponse;
  return proto.InitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitResponse}
 */
proto.InitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.InitResponse.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pk = 1;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.InitResponse.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.InitResponse.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.InitResponse} returns this
 */
proto.InitResponse.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RegRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegRequest}
 */
proto.RegRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegRequest;
  return proto.RegRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegRequest}
 */
proto.RegRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RegResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkX: msg.getPkX_asB64(),
    pkY: msg.getPkY_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegResponse}
 */
proto.RegResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegResponse;
  return proto.RegResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegResponse}
 */
proto.RegResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkX(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkX_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPkY_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes pk_x = 1;
 * @return {!(string|Uint8Array)}
 */
proto.RegResponse.prototype.getPkX = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pk_x = 1;
 * This is a type-conversion wrapper around `getPkX()`
 * @return {string}
 */
proto.RegResponse.prototype.getPkX_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkX()));
};


/**
 * optional bytes pk_x = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkX()`
 * @return {!Uint8Array}
 */
proto.RegResponse.prototype.getPkX_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkX()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RegResponse} returns this
 */
proto.RegResponse.prototype.setPkX = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pk_y = 2;
 * @return {!(string|Uint8Array)}
 */
proto.RegResponse.prototype.getPkY = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pk_y = 2;
 * This is a type-conversion wrapper around `getPkY()`
 * @return {string}
 */
proto.RegResponse.prototype.getPkY_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkY()));
};


/**
 * optional bytes pk_y = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkY()`
 * @return {!Uint8Array}
 */
proto.RegResponse.prototype.getPkY_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkY()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RegResponse} returns this
 */
proto.RegResponse.prototype.setPkY = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AuthRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proofList: msg.getProofList_asB64(),
    challenge: msg.getChallenge_asB64(),
    ct: msg.getCt_asB64(),
    iv: msg.getIv_asB64(),
    digest: msg.getDigest_asB64(),
    d: msg.getD_asB64(),
    e: msg.getE_asB64(),
    id: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tag: msg.getTag_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthRequest}
 */
proto.AuthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthRequest;
  return proto.AuthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthRequest}
 */
proto.AuthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProof(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCt(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIv(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDigest(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setD(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setE(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProofList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getChallenge_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getIv_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getE_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * repeated bytes proof = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.AuthRequest.prototype.getProofList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes proof = 1;
 * This is a type-conversion wrapper around `getProofList()`
 * @return {!Array<string>}
 */
proto.AuthRequest.prototype.getProofList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofList()));
};


/**
 * repeated bytes proof = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofList()`
 * @return {!Array<!Uint8Array>}
 */
proto.AuthRequest.prototype.getProofList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setProofList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.addProof = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.clearProofList = function() {
  return this.setProofList([]);
};


/**
 * optional bytes challenge = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes challenge = 2;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.AuthRequest.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ct = 3;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getCt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ct = 3;
 * This is a type-conversion wrapper around `getCt()`
 * @return {string}
 */
proto.AuthRequest.prototype.getCt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCt()));
};


/**
 * optional bytes ct = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCt()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getCt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setCt = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes iv = 4;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getIv = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes iv = 4;
 * This is a type-conversion wrapper around `getIv()`
 * @return {string}
 */
proto.AuthRequest.prototype.getIv_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIv()));
};


/**
 * optional bytes iv = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIv()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getIv_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIv()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setIv = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes digest = 5;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes digest = 5;
 * This is a type-conversion wrapper around `getDigest()`
 * @return {string}
 */
proto.AuthRequest.prototype.getDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDigest()));
};


/**
 * optional bytes digest = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDigest()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes d = 6;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes d = 6;
 * This is a type-conversion wrapper around `getD()`
 * @return {string}
 */
proto.AuthRequest.prototype.getD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getD()));
};


/**
 * optional bytes d = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getD()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setD = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes e = 7;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getE = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes e = 7;
 * This is a type-conversion wrapper around `getE()`
 * @return {string}
 */
proto.AuthRequest.prototype.getE_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getE()));
};


/**
 * optional bytes e = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getE()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getE_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getE()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setE = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint32 id = 8;
 * @return {number}
 */
proto.AuthRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes tag = 9;
 * @return {!(string|Uint8Array)}
 */
proto.AuthRequest.prototype.getTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes tag = 9;
 * This is a type-conversion wrapper around `getTag()`
 * @return {string}
 */
proto.AuthRequest.prototype.getTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTag()));
};


/**
 * optional bytes tag = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTag()`
 * @return {!Uint8Array}
 */
proto.AuthRequest.prototype.getTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthRequest} returns this
 */
proto.AuthRequest.prototype.setTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    prod: msg.getProd_asB64(),
    d: msg.getD_asB64(),
    e: msg.getE_asB64(),
    sessionCtr: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cmCheckD: msg.getCmCheckD_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthResponse}
 */
proto.AuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthResponse;
  return proto.AuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthResponse}
 */
proto.AuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProd(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setD(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setE(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionCtr(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCmCheckD(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProd_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getE_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSessionCtr();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCmCheckD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes prod = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AuthResponse.prototype.getProd = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prod = 1;
 * This is a type-conversion wrapper around `getProd()`
 * @return {string}
 */
proto.AuthResponse.prototype.getProd_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProd()));
};


/**
 * optional bytes prod = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProd()`
 * @return {!Uint8Array}
 */
proto.AuthResponse.prototype.getProd_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProd()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthResponse} returns this
 */
proto.AuthResponse.prototype.setProd = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes d = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AuthResponse.prototype.getD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes d = 2;
 * This is a type-conversion wrapper around `getD()`
 * @return {string}
 */
proto.AuthResponse.prototype.getD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getD()));
};


/**
 * optional bytes d = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getD()`
 * @return {!Uint8Array}
 */
proto.AuthResponse.prototype.getD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthResponse} returns this
 */
proto.AuthResponse.prototype.setD = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes e = 3;
 * @return {!(string|Uint8Array)}
 */
proto.AuthResponse.prototype.getE = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes e = 3;
 * This is a type-conversion wrapper around `getE()`
 * @return {string}
 */
proto.AuthResponse.prototype.getE_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getE()));
};


/**
 * optional bytes e = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getE()`
 * @return {!Uint8Array}
 */
proto.AuthResponse.prototype.getE_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getE()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthResponse} returns this
 */
proto.AuthResponse.prototype.setE = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 session_ctr = 4;
 * @return {number}
 */
proto.AuthResponse.prototype.getSessionCtr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AuthResponse} returns this
 */
proto.AuthResponse.prototype.setSessionCtr = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes cm_check_d = 5;
 * @return {!(string|Uint8Array)}
 */
proto.AuthResponse.prototype.getCmCheckD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes cm_check_d = 5;
 * This is a type-conversion wrapper around `getCmCheckD()`
 * @return {string}
 */
proto.AuthResponse.prototype.getCmCheckD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCmCheckD()));
};


/**
 * optional bytes cm_check_d = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCmCheckD()`
 * @return {!Uint8Array}
 */
proto.AuthResponse.prototype.getCmCheckD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCmCheckD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthResponse} returns this
 */
proto.AuthResponse.prototype.setCmCheckD = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmCheckD: msg.getCmCheckD_asB64(),
    sessionCtr: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthCheckRequest}
 */
proto.AuthCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthCheckRequest;
  return proto.AuthCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthCheckRequest}
 */
proto.AuthCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCmCheckD(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionCtr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthCheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmCheckD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSessionCtr();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes cm_check_d = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AuthCheckRequest.prototype.getCmCheckD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cm_check_d = 1;
 * This is a type-conversion wrapper around `getCmCheckD()`
 * @return {string}
 */
proto.AuthCheckRequest.prototype.getCmCheckD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCmCheckD()));
};


/**
 * optional bytes cm_check_d = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCmCheckD()`
 * @return {!Uint8Array}
 */
proto.AuthCheckRequest.prototype.getCmCheckD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCmCheckD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthCheckRequest} returns this
 */
proto.AuthCheckRequest.prototype.setCmCheckD = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 session_ctr = 2;
 * @return {number}
 */
proto.AuthCheckRequest.prototype.getSessionCtr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AuthCheckRequest} returns this
 */
proto.AuthCheckRequest.prototype.setSessionCtr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 id = 3;
 * @return {number}
 */
proto.AuthCheckRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AuthCheckRequest} returns this
 */
proto.AuthCheckRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkD: msg.getCheckD_asB64(),
    checkDOpen: msg.getCheckDOpen_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthCheckResponse}
 */
proto.AuthCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthCheckResponse;
  return proto.AuthCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthCheckResponse}
 */
proto.AuthCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCheckD(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCheckDOpen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthCheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCheckDOpen_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes check_d = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AuthCheckResponse.prototype.getCheckD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes check_d = 1;
 * This is a type-conversion wrapper around `getCheckD()`
 * @return {string}
 */
proto.AuthCheckResponse.prototype.getCheckD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCheckD()));
};


/**
 * optional bytes check_d = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCheckD()`
 * @return {!Uint8Array}
 */
proto.AuthCheckResponse.prototype.getCheckD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCheckD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthCheckResponse} returns this
 */
proto.AuthCheckResponse.prototype.setCheckD = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes check_d_open = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AuthCheckResponse.prototype.getCheckDOpen = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes check_d_open = 2;
 * This is a type-conversion wrapper around `getCheckDOpen()`
 * @return {string}
 */
proto.AuthCheckResponse.prototype.getCheckDOpen_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCheckDOpen()));
};


/**
 * optional bytes check_d_open = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCheckDOpen()`
 * @return {!Uint8Array}
 */
proto.AuthCheckResponse.prototype.getCheckDOpen_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCheckDOpen()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthCheckResponse} returns this
 */
proto.AuthCheckResponse.prototype.setCheckDOpen = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthCheck2Request.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthCheck2Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthCheck2Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheck2Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkD: msg.getCheckD_asB64(),
    checkDOpen: msg.getCheckDOpen_asB64(),
    sessionCtr: jspb.Message.getFieldWithDefault(msg, 3, 0),
    id: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthCheck2Request}
 */
proto.AuthCheck2Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthCheck2Request;
  return proto.AuthCheck2Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthCheck2Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthCheck2Request}
 */
proto.AuthCheck2Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCheckD(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCheckDOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionCtr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthCheck2Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthCheck2Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthCheck2Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheck2Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCheckDOpen_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSessionCtr();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes check_d = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AuthCheck2Request.prototype.getCheckD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes check_d = 1;
 * This is a type-conversion wrapper around `getCheckD()`
 * @return {string}
 */
proto.AuthCheck2Request.prototype.getCheckD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCheckD()));
};


/**
 * optional bytes check_d = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCheckD()`
 * @return {!Uint8Array}
 */
proto.AuthCheck2Request.prototype.getCheckD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCheckD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthCheck2Request} returns this
 */
proto.AuthCheck2Request.prototype.setCheckD = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes check_d_open = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AuthCheck2Request.prototype.getCheckDOpen = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes check_d_open = 2;
 * This is a type-conversion wrapper around `getCheckDOpen()`
 * @return {string}
 */
proto.AuthCheck2Request.prototype.getCheckDOpen_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCheckDOpen()));
};


/**
 * optional bytes check_d_open = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCheckDOpen()`
 * @return {!Uint8Array}
 */
proto.AuthCheck2Request.prototype.getCheckDOpen_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCheckDOpen()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthCheck2Request} returns this
 */
proto.AuthCheck2Request.prototype.setCheckDOpen = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 session_ctr = 3;
 * @return {number}
 */
proto.AuthCheck2Request.prototype.getSessionCtr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AuthCheck2Request} returns this
 */
proto.AuthCheck2Request.prototype.setSessionCtr = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 id = 4;
 * @return {number}
 */
proto.AuthCheck2Request.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AuthCheck2Request} returns this
 */
proto.AuthCheck2Request.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AuthCheck2Response.prototype.toObject = function(opt_includeInstance) {
  return proto.AuthCheck2Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AuthCheck2Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheck2Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    out: msg.getOut_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthCheck2Response}
 */
proto.AuthCheck2Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AuthCheck2Response;
  return proto.AuthCheck2Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthCheck2Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthCheck2Response}
 */
proto.AuthCheck2Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOut(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthCheck2Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AuthCheck2Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthCheck2Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthCheck2Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOut_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes out = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AuthCheck2Response.prototype.getOut = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes out = 1;
 * This is a type-conversion wrapper around `getOut()`
 * @return {string}
 */
proto.AuthCheck2Response.prototype.getOut_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOut()));
};


/**
 * optional bytes out = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOut()`
 * @return {!Uint8Array}
 */
proto.AuthCheck2Response.prototype.getOut_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOut()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AuthCheck2Response} returns this
 */
proto.AuthCheck2Response.prototype.setOut = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto);
